import collections
import os


def read_input(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        lines = [line.strip() for line in f.readlines() if line.strip()]

    farms = [x.strip() for x in lines[0].split(",")]
    shops = [x.strip() for x in lines[1].split(",")]
    edges = [list(map(str.strip, line.split(","))) for line in lines[2:]]

    return farms, shops, edges


def build_graph(farms, shops, edges):
    graph = collections.defaultdict(dict)

    for u, v, c in edges:
        c = int(c)
        graph[u][v] = c
        if v not in graph:
            graph[v] = {}

    super_source = "SRC"
    super_sink = "SNK"

    for farm in farms:
        graph[super_source][farm] = float("inf")
    for shop in shops:
        graph[shop][super_sink] = float("inf")

    return graph, super_source, super_sink


def bfs(residual_graph, source, sink, parent):
    visited = set()
    queue = collections.deque([source])
    visited.add(source)

    while queue:
        u = queue.popleft()
        for v, capacity in residual_graph[u].items():
            if v not in visited and capacity > 0:
                visited.add(v)
                parent[v] = u
                if v == sink:
                    return True
                queue.append(v)
    return False


def edmonds_karp(graph, source, sink):
    residual_graph = {}
    for u in graph:
        residual_graph[u] = dict(graph[u])
    for u in graph:
        for v in graph[u]:
            if v not in residual_graph:
                residual_graph[v] = {}

    max_flow = 0
    parent = {}

    while bfs(residual_graph, source, sink, parent):
        path_flow = float("inf")
        s = sink
        while s != source:
            path_flow = min(path_flow, residual_graph[parent[s]][s])
            s = parent[s]

        v = sink
        while v != source:
            u = parent[v]
            residual_graph[u][v] -= path_flow
            residual_graph[v].setdefault(u, 0)
            residual_graph[v][u] += path_flow
            v = parent[v]

        max_flow += path_flow
        parent.clear()

    return int(max_flow)


def main():
    file_path = os.path.join(os.path.dirname(__file__), "roads.csv")
    farms, shops, edges = read_input(file_path)
    graph, source, sink = build_graph(farms, shops, edges)
    max_cars = edmonds_karp(graph, source, sink)
    print(f"Максимальна кількість автомобілів: {max_cars}")


if __name__ == "__main__":
    main()
