def read_graph_from_file(filename):
    with open(filename, "r") as file:
        n = int(file.readline())
        graph = {i: [] for i in range(1, n + 1)}
        for line in file:
            if line.strip():
                u, v = map(int, line.strip().split())
                graph[u].append(v)
    return graph


def dfs_iterative(start, graph, visited):
    stack = [start]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            for neighbor in reversed(graph[vertex]):
                if neighbor not in visited:
                    stack.append(neighbor)


def find_root_vertex(graph):
    for vertex in graph:
        visited = set()
        dfs_iterative(vertex, graph, visited)
        if len(visited) == len(graph):
            return vertex
    return -1


def main():
    graph = read_graph_from_file("input.txt")
    root = find_root_vertex(graph)
    with open("output.txt", "w") as file:
        file.write(str(root))


if __name__ == "__main__":
    main()

